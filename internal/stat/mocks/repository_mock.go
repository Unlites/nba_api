// Code generated by MockGen. DO NOT EDIT.
// Source: internal/stat/repository.go

// Package mock_stat is a generated GoMock package.
package mock_stat

import (
	reflect "reflect"

	models "github.com/Unlites/nba_api/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(stat *models.Stat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", stat)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(stat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), stat)
}

// Delete mocks base method.
func (m *MockRepository) Delete(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), id)
}

// GetAllByGameId mocks base method.
func (m *MockRepository) GetAllByGameId(gameId int64) ([]*models.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllByGameId", gameId)
	ret0, _ := ret[0].([]*models.Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllByGameId indicates an expected call of GetAllByGameId.
func (mr *MockRepositoryMockRecorder) GetAllByGameId(gameId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllByGameId", reflect.TypeOf((*MockRepository)(nil).GetAllByGameId), gameId)
}

// GetAvgByPlayerId mocks base method.
func (m *MockRepository) GetAvgByPlayerId(id int64) (*models.AvgByPlayerIdStat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvgByPlayerId", id)
	ret0, _ := ret[0].(*models.AvgByPlayerIdStat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvgByPlayerId indicates an expected call of GetAvgByPlayerId.
func (mr *MockRepositoryMockRecorder) GetAvgByPlayerId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvgByPlayerId", reflect.TypeOf((*MockRepository)(nil).GetAvgByPlayerId), id)
}

// GetById mocks base method.
func (m *MockRepository) GetById(id int64) (*models.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*models.Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockRepositoryMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockRepository)(nil).GetById), id)
}

// Update mocks base method.
func (m *MockRepository) Update(stat *models.Stat) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", stat)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(stat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), stat)
}
